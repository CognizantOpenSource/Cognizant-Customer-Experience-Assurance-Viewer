#!/usr/bin/groovy
pipeline{
	agent any
	options {
		checkoutToSubdirectory 'test'
		disableConcurrentBuilds()
		disableResume()
		newContainerPerStage()
		overrideIndexTriggers(true)
		preserveStashes(buildCount: 30)
		quietPeriod(10)
		retry(3)
		skipDefaultCheckout()
		skipStagesAfterUnstable()
		timestamps()
		timeout (time:10, unit:'HOURS')
		buildDiscarder(logRotator(artifactDaysToKeepStr:'20', artifactNumToKeepStr:'20', daysToKeepStr:'23', numToKeepStr:'10'))
	}
	environment{
		MY_NAME = 'Ramanjaneyulu'
		MY_VALUE = credentials('MyId')
	}
	tools {
		gradle 'gradle5.4'
	}
	triggers {
		upstream(upstreamProjects: 'job1,job2', threshold: hudson.model.Result.SUCCESS)
	}
	parameters{
		string(name: 'PERSON', defaultValue: 'Mr. RAM', description: 'who should I say Hello to..? ')
		text(name: 'ABOUT', defaultValue: '', description: 'Some information about you...!')
		booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
		choice(name: 'CHOICE', choices: ['one','two','three','four'], description: 'Select one from the list')
		password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter password')
		file(name: 'FILE', description: 'Choose a file to upload')
	}
	stages{
		stage('Initialize'){
			environment{
				MY_NAME = 'Ramanjaneyulu'
				MY_VALUE = credentials('MyId')
			}
			steps{
				sh 'echo PATH = ${PATH}'
				sh 'echo M2_HOME = ${M2_HOME}'
				sh 'pwd'
				sh 'ls'
			}
		}
		stage('active-security-scan'){
			input{
				message "Should we continue?"
				ok "Yes, we should."
				submitter "RAM,admin"
				parameters{
					string(name: 'PERSON', defaultValue: 'Mr. RAM', description: 'who should I say Hello to..? ')
					text(name: 'ABOUT', defaultValue: '', description: 'Some information about you...!')
					booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
					choice(name: 'CHOICE', choices: ['one','two','three','four'], description: 'Select one from the list')
					password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter password')
					file(name: 'FILE', description: 'Choose a file to upload')
				}
			}
			steps{
				sh 'mvn test -Dtype=owasp-active'
				sh 'ls'
			}
		}
		stage('active-security-scan012'){
			when{
				allOf{
				branch 'master'
				triggeredBy 'TimerTrigger'
				tag comparator: 'REGEXP', pattern: 'release-\d+'
				changeset caseSensitive: true, glob: 'ReadMe.*'
				changeRequest author: 'test',authorDisplayName: 'test',authorEmail: 'test',branch: 'test',comparator: 'EQUALS',fork: 'test',id: 'test',target: 'test',title: 'test',url: 'test'
				}
				beforeAgent true
				beforeInput true
			}
			steps{
				sh 'mvn test -Dtype=owasp-active'
			}
		}
			stage('test-cits-1'){
				agent{
				    kubernetes {
					    defaultContainer 'test-cits'
					    yaml """
spec:
  volumes:
  - name: volume-0
    persistentVolumeClaim:
      claimName: task-pv-claim
      readOnly: false
  containers:
  - name: test-cits
    image: x0156/cits-jre-slim-chrome
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    env:
    - name: REPLICAS
      value: 3
    - name: REPLICA_ID
      value: 1
    volumeMounts:
    - mountPath: /root/.m2/repository
      name: volume-0
      readOnly: false
"""
				        }
			    }
				steps{
					checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'cits']], userRemoteConfigs: [[credentialsId: 'gitlab_cred_cts', url: 'https://code.cognizant.com/tech-coe-leap-starter/leap-demo-e2e-cits.git']]])
					dir('cits'){
					sh 'cits -run -project_location "$(pwd)" -release "NewRelease" -testset "NewTestSet" -setEnv "driver.ChromeDriverPath=/usr/bin/chromedriver" -setEnv "user.app.base.url=http://10.120.100.56:9119" -standalone_report -browser "Chrome Headless"'
					publishHTML target: [ allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "./Results/TestExecution/NewRelease/NewTestSet/Latest", reportFiles: "summary.html", reportName: "cits-report" ]
					}
				}
		    }
	}
	post{
		always{
			sleep time: 0, unit: 'SECONDS'
			echo 'SECONDS'
		}
		unstable{
			sleep time: 0, unit: 'SECONDS'
			echo 'SECONDS'
		}
		success{
			publishHTML target: [ allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: "coverage", reportFiles: "index.html", reportName: "RCov Report" ]
			withSonarQubeEnv('SonarQube') {
				sh 'mvn cobertura:cobertura $SONAR_MAVEN_GOAL -Dcobertura.report.format=xml  -Dsonar.cobertura.reportPath=target/site/cobertura/coverage.xml'
			}
		}
		failure{
			sh '''source results.properties
			echo "Pass Rate is "$PASSED_PERCENTAGE
			if [ "$PASSED_PERCENTAGE" -ge "$QUALITY_THRESHOLD" ]
			then
			    echo "Pass Rate - $PASSED_PERCENTAGE is greater than or equal to expected Threshold - $QUALITY_THRESHOLD . ci-cd pipeline will continue to execute further"
			else
			    echo "Pass Rate - $PASSED_PERCENTAGE is less than expected Threshold - $QUALITY_THRESHOLD . ci-cd pipeline will not continue to execute further"
			    exit 1
			fi'''
		}
		changed{
			withSonarQubeEnv('SonarQube') {
				sh '''$JENKINS_HOME/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonarqube/bin/sonar-scanner -Dsonar.projectName=angularjs-springmvc-sample-boot
				-Dsonar.projectVersion=1.0-SNAPSHOT
				-Dsonar.zaproxy.reportPath=$JENKINS_HOME/jobs/$JOB_NAME/builds/$BUILD_NUMBER/zap/zap-raw.xml
				-Dsonar.projectKey=com.hantsylabs.restexample.springmvc:angularjs-springmvc-sample-boot
				-Dsonar.projectBaseDir=$WORKSPACE -Dsonar.sources=src
				-Dsonar.java.binaries=target'''
			}
		}
	}
}